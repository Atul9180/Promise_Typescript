/*Create a new function called delete post which uses promises and deletes in 1 second (processing time - mimic it with setimeout). Everytime you call it, it should delete the last element of the array

3)Continue deleting the elements up till all the elements are deleted from the array. Now when you delete again an error would be thrown , catch the error and console log in the browser-> Array is empty now. You dont have to use for loop as there are only 3 posts . Just call delete post 3 times. (Demo Link).

(If stuck for very long check hint 1. But trust me this is super easy)

4)Try creating a post (post four) and once the post is created, call delete post after 1 second and delete post 4 .how would you do it. Write the code.
*/

const posts = [{ title: 'Post 1', body: 'this is post 1' }, { title: 'Post 2', body: 'this is post 2' }]

let timeIndex = 0;
function getPosts() {
  clearTimeout(timeIndex);
  timeIndex = setTimeout(() => {
    let output = '';
    posts.forEach((post, index) => {
      output += `<li>${post.title}</li>`;
    })
    document.body.innerHTML = output;
  }, 1000)
}

function createPost(post) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      posts.push(post);
      const error = false;
      if (!error) { resolve(); }
      else {
        reject('Error: something went wrong.');
      }
    }, 2000)
  })
}

function deletepost(){
  return new Promise((resolve,reject)=>{
    setTimeout(()=>{
      if(posts.length!=0){
        resolve(posts.pop());
      }
      else{
        reject('Array out of bound.');
      }
    },1000)
  })
}

createPost({ title: 'Post 3', body: 'this is post 3' })
  .then(()=>{
        getPosts();
        deletepost().then(()=>{
          getPosts();
          deletepost().then(()=>{ 
            getPosts();
            deletepost().then(()=>{ 
              getPosts();
              createPost({title: 'Post 4', body: 'this is post 4'})
                .then(()=>{
                  getPosts();
                  deletepost().then(()=>{ 
                    getPosts();
                  }).catch(err => console.log(err))
              }).catch(err => console.log(err))
            }).catch(err => console.log(err))  
          }).catch(err => console.log(err))          
        }).catch(err => console.log(err))
    }).catch(err => console.log(err))



































